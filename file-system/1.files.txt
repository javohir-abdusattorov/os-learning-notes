Os supports 2 part file names, with them being separated by a period: program.txt. The part after period is called file extension and indicates something about the file

In UNIX systems file extensions are just conventions and are not enforced by the OS. File named something.txt might be some kind of text file, but that name is more to remind the owner than to convey any actual information

Common file structure is unstructured sequence of bytes. OS just sees bytes, any meaning must be imposed by user-level programs. This provides maximum amount of flexiblity

Many operation systems support several types of files:
* regular - contain user information
* directories - system files for maintaining the structure of file system
* character special - related to I/O and used to model serial I/O devices, such as terminals, printers, and networks
* block special - used to model disks

Regular files are generally either ASCII or binary files
ASCII files great for displaying and printed as it is, and they can be edited with any text editor
Binary files are not readable or printable. Usually, they have some internal structure known to programs that use them

Early operating systems provided one kind of file access - sequental access, process should read file in order, starting at beginning

Files whose bytes or records can be read in any order are called random-access files.
2 methods can be used for specifying where to start reading:
* first one, every read operation gives the position in the file to start reading at
* second one, a special operation seek is provided to set the current position. After seek, file can be read sequentially from the now-current position

Every file in addition to its name and data have other information called attributes or metadata:
* protection - who can access the file and in what way
* password - the password needed to access the file
* creator - identifier of the user who created the file
* owner - current owner
* read-only flag - 0 for read/write; 1 for read only
* hidden flag - 0 for normal; 1 for do not display in listings
* system flag - 0 for normal files; 1 for system file
* archive flag - 0 for has been backed up; 1 for needs to backed up
* ASCII/binary flag - 0 for ASCII file; 1 for binary file
* random access flag - 0 for sequential access only; 1 for random access
* temporary flag - 0 for normal; 1 for delete file on process exit
* lock flag - 0 for unlocked; nonzero for locked
* record length - number of bytes in a record
* key position - offset of the key within each record
* key length - number of bytes in the key field
* creation time - date and time the file was created
* time of last access - date and time the file was last accessed
* time of last change - date and time the file was last changed
* current size - number of bytes in the file
* maximum size - number of bytes file may grow to